/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/title": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * List All Titles
     * @description Fetches a list of all capstone titles
     *     NonAdmin: only from previous the period
     *     Admin : all titles
     */
    get: operations["get-api-title"];
    put?: never;
    /**
     * Register a New Title
     * @description Submits and registers a new capstone title for the upcoming period
     */
    post: operations["post-api-title"];
    delete?: never;
    options?: never;
    head?: never;
    /**
     * Update an Existing Title
     * @description Updates the details of a registered title
     */
    patch: operations["patch-api-title"];
    trace?: never;
  };
  "/title/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get Title by ID
     * @description Retrieves the complete and detailed information for a single capstone title
     *     NonAdmin: cannot see proposal_url except the owner or the submission is accepted
     *     Admin : retrieve all data
     */
    get: operations["get-api-title-id"];
    put?: never;
    post?: never;
    /**
     * Delete a Title
     * @description Permanently deletes a specific capstone title
     *     Nonadmin : cannot use this
     *
     */
    delete: operations["del-api-title-id"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/submission": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * List All Title Submissions
     * @description Fetches a list of all capstone title submissions
     *     Nonadmin : only submission from and to user team
     *     Admin : all submission
     */
    get: operations["get-api-submission"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/submission/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get Submission by ID
     * @description Retrieves the complete and detailed information for a single submission
     *     NonAdmin: only submission from and to user team
     *     Admin : all submission
     */
    get: operations["get-api-submission-id"];
    put?: never;
    post?: never;
    /**
     * Delete a Submission
     * @description Deletes a specific submission
     *     Nonadmin : cannot use this
     */
    delete: operations["del-api-submission-id"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/submission/submit": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Submit a Proposal for a Title
     * @description Allows captain team to submit their project proposal for a chosen title
     *
     */
    post: operations["post-api-submission-submit"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/submission/response": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Accept or Reject a Submission
     * @description Allows a captain team to respond to a team's submission by either accepting or rejecting it
     */
    post: operations["post-api-submission-response"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/team": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * List All Teams
     * @description Fetches a list of all team
     *     Nonadmin : cannot use this
     */
    get: operations["get-api-team"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/team/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get Team by ID
     * @description Fetches the public profile and member list for a specific team
     */
    get: operations["get-api-team-id"];
    put?: never;
    post?: never;
    /**
     * Delete a Team
     * @description Deletes an entire team and its associated data
     *     Nonadmin : cannot use this
     */
    delete: operations["del-api-team-id"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/team/join": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Join a Team via Invite Code
     * @description Allows user to become a member of an existing team
     */
    post: operations["post-api-team-join"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/team/kick/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /**
     * Remove a Member from Team
     * @description Remove a specific member from their team
     */
    delete: operations["post-api-team-kick"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/team/new": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Create New Teams
     * @description Creates one or more new teams for a capstone period
     *     Nonadmin : cannot use this
     */
    post: operations["post-api-team-new"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/user/me": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get My User Profile
     * @description Retrieves the complete profile information for the currently authenticated user
     */
    get: operations["get-api-user-me"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/user/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get User Profile by ID
     * @description Fetches the public profile information for a specific user
     */
    get: operations["api-user-id"];
    put?: never;
    post?: never;
    /**
     * Delete a User
     * @description Removes a user account
     *     Nonadmin : cannot use this
     */
    delete: operations["del-api-admin-user"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/user": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    /**
     * Update My User Profil
     * @description  Updates the profile information for the authenticated user
     */
    patch: operations["patch-api-user"];
    trace?: never;
  };
  "/user/": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * List All Users
     * @description Retrieves a list of all users
     *     Nonadmin : cannot use this
     */
    get: operations["get-user"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/auth/signin/password": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Sign In with Email and Password
     * @description Authenticates a user and creates a new session using their registered email and password credentials
     */
    post: operations["get-auth-signin-password"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/auth/signup/password": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Sign Up with Email and Password
     * @description Registers a new user account in the system using an email and password
     */
    post: operations["post-auth-signup-password"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/auth/signout": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Sign Out
     * @description Logs out the currently authenticated user and invalidates their session token
     */
    get: operations["get-auth-signout"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/auth/google": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Authenticate with Google
     * @description Initiates the OAuth 2.0 flow to allow a user to sign in or sign up using their Google account
     */
    get: operations["get-auth-google"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    "data-team": {
      id?: string;
      name?: string;
      leader_email?: string;
      title_id?: string;
      category?: components["schemas"]["CategoryCapstone"];
      period?: number;
      code?: string;
      member?: components["schemas"]["data-user-short"][];
    };
    "data-team-short": {
      id?: string;
      name?: string;
      category?: components["schemas"]["CategoryCapstone"];
      period?: number;
    };
    "data-team-new": {
      name: string;
      leader_email: string;
      category: components["schemas"]["CategoryCapstone"];
    };
    RespGenerateNewTeam: {
      success_count: number;
      error_count: number;
      data?: components["schemas"]["data-team"][];
      error_data?: {
        name: string;
        leader_email: string;
        category: components["schemas"]["CategoryCapstone"];
        error: string;
      }[];
      period: number;
    };
    "data-user": {
      id?: string;
      cv_url?: string;
      team_id?: string;
      name?: string;
      email?: string;
      google_id?: string;
    };
    "data-user-short": {
      id?: string;
      name?: string;
    };
    "data-submission": {
      id?: string;
      team_id?: string;
      grand_design_url?: string;
      team_target_id?: string;
      accepted?: boolean;
    };
    "data-submission-short": {
      id?: string;
      team_id?: string;
      team_target_id?: string;
    };
    "data-title": {
      id?: string;
      title?: string;
      desc?: string;
      description?: string;
      photo_url?: string;
      proposal_url?: string;
      is_taken?: boolean;
    };
    "data-title-short": {
      id?: string;
      title?: string;
      desc?: string;
      photo_url?: string;
    };
    "signin-password-body": {
      email: string;
      password: string;
    };
    "signup-password-body": {
      email: string;
      password: string;
      name: string;
    };
    DefaultErrors: {
      status: number;
      error?: string;
      message?: string;
      details?: {
        [key: string]: unknown;
      };
    };
    /** @enum {string} */
    CategoryCapstone:
      | "Kesehatan"
      | "Pengelolaan Sampah"
      | "Smart City"
      | "Transportasi Ramah Lingkungan";
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
  "get-api-title": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Fetches a list of all project titles from the previous period */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["data-title-short"][];
        };
      };
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["DefaultErrors"];
        };
      };
    };
  };
  "post-api-title": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: {
      content: {
        "multipart/form-data": {
          /**
           * Format: binary
           * @example
           */
          photo_file: string;
          /**
           * Format: binary
           * @example
           */
          proposal_file: string;
          /** @example  */
          title: string;
          /** @example  */
          desc: string;
          /** @example  */
          description: string;
        };
      };
    };
    responses: {
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["data-title"];
        };
      };
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["DefaultErrors"];
        };
      };
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["DefaultErrors"];
        };
      };
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["DefaultErrors"];
        };
      };
    };
  };
  "patch-api-title": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: {
      content: {
        "multipart/form-data": {
          /**
           * Format: binary
           * @example
           */
          photo_file?: string;
          /**
           * Format: binary
           * @example
           */
          proposal_file?: string;
          /** @example  */
          title?: string;
          /** @example  */
          desc?: string;
          /** @example  */
          description?: string;
        };
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["data-title"];
        };
      };
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["DefaultErrors"];
        };
      };
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["DefaultErrors"];
        };
      };
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["DefaultErrors"];
        };
      };
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["DefaultErrors"];
        };
      };
    };
  };
  "get-api-title-id": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["data-title"];
        };
      };
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["DefaultErrors"];
        };
      };
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["DefaultErrors"];
        };
      };
    };
  };
  "del-api-title-id": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      204: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": null;
        };
      };
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["DefaultErrors"];
        };
      };
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["DefaultErrors"];
        };
      };
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["DefaultErrors"];
        };
      };
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["DefaultErrors"];
        };
      };
    };
  };
  "get-api-submission": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["data-submission-short"][];
        };
      };
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["DefaultErrors"];
        };
      };
    };
  };
  "get-api-submission-id": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["data-submission"];
        };
      };
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["DefaultErrors"];
        };
      };
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["DefaultErrors"];
        };
      };
    };
  };
  "del-api-submission-id": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      204: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": null;
        };
      };
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["DefaultErrors"];
        };
      };
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["DefaultErrors"];
        };
      };
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["DefaultErrors"];
        };
      };
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["DefaultErrors"];
        };
      };
    };
  };
  "post-api-submission-submit": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: {
      content: {
        "multipart/form-data": {
          /** @example  */
          team_target_id: string;
          /**
           * Format: binary
           * @example
           */
          grand_design: string;
        };
      };
    };
    responses: {
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["data-submission"];
        };
      };
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["DefaultErrors"];
        };
      };
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["DefaultErrors"];
        };
      };
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["DefaultErrors"];
        };
      };
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["DefaultErrors"];
        };
      };
    };
  };
  "post-api-submission-response": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: {
      content: {
        /** @example {
         *       "id": "123",
         *       "accept": false
         *     } */
        "application/json": {
          id: string;
          accept: string;
        };
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["data-submission"];
        };
      };
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["DefaultErrors"];
        };
      };
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["DefaultErrors"];
        };
      };
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["DefaultErrors"];
        };
      };
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["DefaultErrors"];
        };
      };
    };
  };
  "get-api-team": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["data-team"];
        };
      };
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["DefaultErrors"];
        };
      };
    };
  };
  "get-api-team-id": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["data-team"];
        };
      };
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["DefaultErrors"];
        };
      };
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["DefaultErrors"];
        };
      };
    };
  };
  "del-api-team-id": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      204: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": null;
        };
      };
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["DefaultErrors"];
        };
      };
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["DefaultErrors"];
        };
      };
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["DefaultErrors"];
        };
      };
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["DefaultErrors"];
        };
      };
    };
  };
  "post-api-team-join": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: {
      content: {
        /** @example {
         *       "id": "123"
         *     } */
        "application/json": {
          code: string;
        };
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["data-team"];
        };
      };
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["DefaultErrors"];
        };
      };
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["DefaultErrors"];
        };
      };
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["DefaultErrors"];
        };
      };
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["DefaultErrors"];
        };
      };
    };
  };
  "post-api-team-kick": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      204: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": Record<string, never>;
        };
      };
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["DefaultErrors"];
        };
      };
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["DefaultErrors"];
        };
      };
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["DefaultErrors"];
        };
      };
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["DefaultErrors"];
        };
      };
    };
  };
  "post-api-team-new": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: {
      content: {
        /** @example {
         *       "new_period": true,
         *       "team_data": [
         *         {
         *           "name": "Team-1",
         *           "leader_email": "tes2@mail.com",
         *           "category": "Kesehatan"
         *         }
         *       ]
         *     } */
        "application/json": {
          new_period?: boolean;
          team_data: components["schemas"]["data-team-new"][];
        };
      };
    };
    responses: {
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["RespGenerateNewTeam"];
        };
      };
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["DefaultErrors"];
        };
      };
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["DefaultErrors"];
        };
      };
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["DefaultErrors"];
        };
      };
    };
  };
  "get-api-user-me": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["data-user"];
        };
      };
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["DefaultErrors"];
        };
      };
    };
  };
  "api-user-id": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["data-user"];
        };
      };
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["DefaultErrors"];
        };
      };
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["DefaultErrors"];
        };
      };
    };
  };
  "del-api-admin-user": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      204: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": null;
        };
      };
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["DefaultErrors"];
        };
      };
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["DefaultErrors"];
        };
      };
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["DefaultErrors"];
        };
      };
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["DefaultErrors"];
        };
      };
    };
  };
  "patch-api-user": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: {
      content: {
        "multipart/form-data": {
          /** @example  */
          name?: string;
          /**
           * Format: email
           * @example
           */
          email?: string;
          /** @example  */
          password?: string;
          /**
           * Format: binary
           * @example
           */
          cv_file?: string;
        };
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["data-user"];
        };
      };
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["DefaultErrors"];
        };
      };
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["DefaultErrors"];
        };
      };
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["DefaultErrors"];
        };
      };
    };
  };
  "get-user": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["data-user-short"][];
        };
      };
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["DefaultErrors"];
        };
      };
    };
  };
  "get-auth-signin-password": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: {
      content: {
        /** @example {
         *       "email": "string",
         *       "password": "string"
         *     } */
        "application/json": components["schemas"]["signin-password-body"];
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["data-user"];
        };
      };
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["DefaultErrors"];
        };
      };
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["DefaultErrors"];
        };
      };
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["DefaultErrors"];
        };
      };
    };
  };
  "post-auth-signup-password": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["signup-password-body"];
      };
    };
    responses: {
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["data-user"];
        };
      };
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["DefaultErrors"];
        };
      };
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["DefaultErrors"];
        };
      };
    };
  };
  "get-auth-signout": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": Record<string, never>;
        };
      };
    };
  };
  "get-auth-google": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      302: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "*/*": Record<string, never>;
        };
      };
    };
  };
}
